#game-wrapper {
    display: none;

    /* set by js */
    --selected-tile-color: unset;
    --latest-tile-color: unset;
}

.game-active #game-wrapper {
    display: grid;
    grid-template-rows: auto 1fr auto;
    align-items: center;
    justify-items: center;
    width: 100%;
    height: 100%;
    padding: 10px;
    box-sizing: border-box;
    overflow: hidden;
}



#info-area {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 0;
}

#level-timer-info {
    font-size: 1.2rem;
    color: var(--theme-text-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
}

#timer-display {
    min-width: 5ch;
}

.dot {
    color: var(--theme-surface);
}

#spots-display {
    font-size: 50px;
    font-family: math;
    text-align: center;
    min-width: 7.5ch;
}

#timer-displays {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 20px;
    font-family: math;
}
#timer-displays > *:empty {
    display: none;
}

#level-time-display {
    color: var(--status-timer-countdown);
    font-size: 50px;
}
#level-display {
    white-space: nowrap;
}


#global-time-display {
    color: var(--status-timer-global);
    font-size: 50px;
}
#global-time-wrapper {
    position: relative;
}
#global-time-wrapper:has(#global-time-display:empty) {
    display: none;
}

.time-gained-popup {
    position: absolute;
    bottom: 80%;
    left: 50%;
    transform: translateX(-50%);

    font-size: 24px;
    font-weight: 700;
    color: var(--status-timer-global);
    animation: time-gained-float-down 1s cubic-bezier(0.1, 0.8, 0.4, 1) forwards;
}

@keyframes time-gained-float-down {
    0% {
        opacity: 1;
        transform: translate(-50%, 0);
    }
    80% {
        opacity: 1;
    }
    100% {
        opacity: 0;
        transform: translate(-50%, 60px);
    }
}











#lives-display {
    display: flex;
    flex-direction: row;
    justify-content: center;
}
.heart {
    font-size: 40px;
    background: linear-gradient(160deg, var(--color-deep-red), var(--color-dark-red) 80%);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
}
.heart.heart-lost {
    animation: heart-lost-animation 500ms cubic-bezier(0.6, -0.28, 0.735, 0.045) forwards;
}
@keyframes heart-lost-animation {
    0% { opacity: 1; transform: scale(1) rotate(0); }
    30% { transform: scale(1.2) rotate(-5deg); }
    100% { opacity: 0; transform: translateY(80px) translateX(-20px) rotate(45deg) scale(0); }
}


#tutorial-text-display {
    font-family: 'Poppins', sans-serif;
    font-size: clamp(1rem, 5vw, 2rem);
    font-weight: 400;
    max-width: 90%;
    color: color-mix(in oklab, var(--tile-color) 50%, var(--theme-text-primary) 50%);
    transition: opacity 300ms ease-in-out;
    z-index: 10;
    opacity: 0;
}
#tutorial-text-display:not(:empty) {
    margin-bottom: 3vw;
}











#grid-area {
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 100%; 
    align-items: center;
    justify-content: center;
    min-height: 0;
}



#gamegrid-sizer-height {
    aspect-ratio: var(--grid-column-count) / var(--grid-row-count);
    width: 95%;
    height: auto;
    min-height: 0;
    max-height: 95%;
    
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;

    /* for the tutorial text */
    flex-direction: column;

    /* set by js */
    --grid-column-count: 0;
    --grid-row-count: 0;
    --grid-tile-size: 0;

    --grid-tile-shadow: calc(0.03 * var(--grid-tile-size));
    --grid-block-height: calc(0.2 * var(--grid-tile-size));

    /* more margin if the grid is smaller, so there is space for the svg border */
    /* i can't use --grid-tile-size in here, because that would result in an infinite loop between js and css */
    margin-right: calc(120px / var(--grid-column-count));
    margin-left: calc(120px / var(--grid-column-count));

    margin-top: calc(120px / var(--grid-row-count));
    margin-bottom: calc(120px / var(--grid-row-count));
}

#gamegrid-sizer-width {
    position: relative;
    aspect-ratio: var(--grid-column-count) / var(--grid-row-count);
    width: auto;
    height: 100%;
}

#gamegrid-grid {
    height: 100%;
    display: grid;
    grid-template-columns: repeat(var(--grid-column-count), 1fr);
}
#gamegrid-grid::before {
    position: absolute;
    content: '';
    height: 100%;
    width: 100%;
    z-index: -2;
    background-color: rgb(from var(--theme-bg) r g b / 0.5);
}


#gamegrid-border-svg {
    position: absolute;
    top: 0;
    pointer-events: none;
    overflow: visible;
    z-index: -1;
}

#gamegrid-border-path {
    fill: none;
    stroke: var(--theme-border);
    stroke-width: calc(0.1 * var(--grid-tile-size));
    stroke-linecap: round;
    stroke-linejoin: round;
}






.tile {
    position: relative;
    border-radius: 10%;
    margin: 4%;
    transition: translate 0.1s cubic-bezier(0.25, 0.1, 0.25, 1);
    --tile-color: transparent;
}


.tile.grid {
    background-color: rgb(from var(--theme-surface) r g b / 0.7);
    box-shadow: var(--grid-tile-shadow) var(--grid-tile-shadow) black;
}
/* disabled on mobile */
@media (pointer: fine) {
    #gamegrid-grid:not(.input-disabled) .tile.grid:hover {
        background-color: color-mix(in oklab, var(--theme-surface) 93%, var(--selected-tile-color) 7%);
        outline: calc(0.02 * var(--grid-tile-size)) solid var(--selected-outline-color);
        cursor: pointer;
    }
}




.tile.block {
    background-color: color-mix(in oklab, var(--tile-color) 70%, black 30%);
    filter: drop-shadow(0px var(--grid-tile-shadow) 2px rgba(0, 0, 0, 0.4));
}
.tile.block::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    
    background: var(--tile-color);
    border-radius: inherit;
    transform: translateY(-30%);
}
.tile.transparent {
    opacity: 0.3;
}



.tile-red { --tile-color: var(--tile-color-red); }
.tile-blue { --tile-color: var(--tile-color-blue); }
.tile-yellow { --tile-color: var(--tile-color-yellow); }
.tile-purple { --tile-color: var(--tile-color-purple); }
.tile-white { --tile-color: var(--tile-color-white); }
.tile-wall { --tile-color: var(--tile-color-wall); }




.tile.wall {
    filter: drop-shadow(0px 0px 1px black);
}








#controls-area {
    display: flex;
    justify-items: center;
    align-items: center;
    gap: calc(0.4 * var(--block-size));
    margin-top: 20px;
    min-width: 0;

    --block-size: clamp(30px, 10vmin, 60px);
}


#tile-selector {
    display: grid;
    grid-auto-flow: column;
    gap: calc(0.7 * var(--block-size));
    background-color: var(--theme-surface);
    padding: calc(0.5 * var(--block-size));
    border-radius: calc(0.25 * var(--block-size));

}
#tile-selector .tile.block {
    cursor: pointer;
    width: var(--block-size);
    height: var(--block-size);
    margin: 0;
}
#tile-selector .tile.block.selected::before {
    outline: 3px solid var(--selected-outline-color);
    outline-offset: calc(0.1 * var(--block-size));
    border-radius: calc(0.1 * var(--block-size));
}

#tile-selector .tile.block.future {
    cursor: auto;
    --tile-color: var(--tile-color-future);
}
#tile-selector .tile.block.future::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -90%);
    width: calc(0.8 * var(--block-size));
    height: calc(0.8 * var(--block-size));
    
    mask-size: contain;
    mask-repeat: no-repeat;
    mask-position: center;
    mask-image: url('../svg/question-mark.svg');
    background-color: rgba(0, 0, 0, 0.5);
}


#hint-button > .button-counter.using-hint {
    color: var(--status-new-record);
}
#hint-button > .button-counter.no-hints {
    color: var(--status-mistake);
}




#seed-display {
    font-size: 1.1rem;
    bottom: 0px;
    right: 5px;
    position: fixed;
    color: var(--theme-text-tertiary);
}












#level-end-screen {
    position: fixed;
    bottom: 0;
    left: 2vmin;
    right: 2vmin;
    z-index: 10;
    
    background: color-mix(in oklab, var(--theme-surface) 95%, black 5%);
    padding: 40px;
    border-radius: 20px;
    translate: 0 calc(100% - 70px);

    display: none;
    flex-direction: column;
    align-items: center;
    
    box-shadow: 0 -5px 20px rgba(0,0,0,0.5);
    transition: translate var(--animation-speed) cubic-bezier(.3, .7, .4, 1);
    color: var(--theme-text-primary);
}
#level-end-screen.visible {
    display: flex;
    opacity: 1;
    pointer-events: auto;
}
#level-end-screen.moveup {
    translate: 0 0;
}


#end-hide-button {
    position: absolute;
    top: -10px;
    width: 100px;
    height: 40px;
}

#end-hide-button::before,
#end-hide-button::after {
    mask-image: url('../svg/arrowhead.svg');
    transition: rotate var(--animation-speed) ease-in-out;
    transform-origin: 0% 0%;
}
#level-end-screen.moveup #end-hide-button::before {
    transform: translate(calc(-50% - 2px), calc(-50% - 2px));
}


#level-end-screen.moveup #end-hide-button::before,
#level-end-screen.moveup #end-hide-button::after {
    rotate: 180deg;
}

#end-screen-title {
    font-size: 2.2rem;
    font-weight: 700;
    margin: 0;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

#end-screen-stats {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    width: 100%;
    max-width: 400px;
    margin-bottom: 20px;
    justify-content: center;
}

.stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    font-family: 'Poppins', sans-serif;
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--theme-text-primary);
    padding: 10px 15px;
    background-color: var(--theme-bg);
    border: 2px solid var(--theme-surface);
    border-radius: 12px;
    box-shadow: inset 0 4px 8px rgba(0,0,0,0.4);
}
.stat-item > .stat-key {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--theme-text-secondary);
    text-wrap-mode: nowrap;
}
.stat-item > .stat-value {
    font-size: 1.4rem;
    font-weight: 700;
    font-family: math;
    text-wrap-mode: nowrap;
}

.stat-item.new-record {
    border-color: var(--status-new-record);
    box-shadow: 0 0 15px -2px color-mix(in oklab, var(--status-new-record) 80%, transparent);
}
.stat-item.new-record > .stat-key {
    color: color-mix(in oklab, var(--status-new-record) 70%, white);
}
.stat-item.new-record > .stat-value {
    color: white;
    text-shadow: 0 0 8px var(--status-new-record);
}


#end-screen-buttons {
    display: flex;
    flex-direction: row;
    gap: 15px;
}



#end-home-button { --button-bg: var(--theme-accent); }
#end-retry-button { --button-bg: var(--theme-accent); }



















@media (width < 600px) {
    #tile-selector {
        grid-auto-flow: row;
        grid-template-columns: 1fr 1fr;
    }

    #tile-selector:has(> :only-child) {
        grid-template-columns: 1fr;
    }
}







@media (aspect-ratio > 1/1) {
    #game-wrapper {
        grid-template-rows: unset !important;
        grid-template-columns: auto 1fr auto;
    }

    #controls-area {
        margin-top: 0px;
        margin-left: 20px;
        flex-direction: column;
    }

    #timer-displays {
        flex-direction: column;
        gap: 0px;
    }
    
    #lives-display {
        flex-direction: column;
    }

    #tile-selector {
        grid-auto-flow: row;
    }
    @media (height < 600px) {
        #tile-selector {
            grid-auto-flow: column;
            grid-template-rows: 1fr 1fr;
        }

        #tile-selector:has(> :only-child) {
            grid-template-rows: 1fr;
        }
    }
}











@keyframes invalid-shake {
    25% { transform: rotate(3deg); }
    75% { transform: rotate(-3deg); }
}
@keyframes tile-win-bright {
    50% {
        transform: scale(1.1); 
        filter: brightness(2);
    }
}
@keyframes hint-breathe {
    0%, 100% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(calc(-0.1 * var(--grid-tile-size)));
    }
}



.animating-hint-breathe {
    translate: 0 calc(-0.1 * var(--grid-tile-size));
    filter: brightness(1.3);
    animation: hint-breathe 1.5s infinite cubic-bezier(0.4, 0, 0.6, 1);
}

.animating-invalid-shake {
    translate: 0 calc(-0.2 * var(--grid-tile-size));
    filter: brightness(1.2) !important;
    outline: 3px solid var(--status-mistake);
    animation: invalid-shake 150ms infinite cubic-bezier(0.5, 0, 0.2, 1);
}
.animating-win {
    animation: tile-win-bright 400ms cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}






















/* --- Particle Styles --- */
.particle-effect-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: visible;
    pointer-events: none;
}

.tile-particle-fly-out {
    position: absolute;
    top: 25%;
    left: 50%;
    width: 10%;
    height: 10%;
    border-radius: 50%;
    background-color: var(--tile-color);
    animation-name: particle-fly-out;
    animation-timing-function: cubic-bezier(0.1, 0.8, 0.4, 1);
    animation-fill-mode: forwards;
}

@keyframes particle-fly-out {
    70% {
      opacity: 1;
    }
    100% {
      transform: translate(0, -600%) scale(2);
      opacity: 0;
    }
}